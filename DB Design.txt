
CREATE TABLE `user` (
  `user_id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) NOT NULL,
  `user_first_name` varchar(255) NOT NULL,
  `user_last_name` varchar(255) NOT NULL,
  `user_email` varchar(255) NOT NULL,
  `user_password` varchar(255) NOT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` varchar(255) NOT NULL,
  `is_user_active` BOOLEAN NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `user_email_UNIQUE` (`user_email`),
  UNIQUE KEY `username_UNIQUE` (`username`));


CREATE TABLE `dept` (
  `dept_id` int NOT NULL AUTO_INCREMENT,
  `dept_code` varchar(255) NOT NULL,
  `department_name` varchar(255) DEFAULT NULL,
  `parent_department_code` varchar(255) DEFAULT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` varchar(255) NOT NULL,
  `is_dept_active` BOOLEAN NOT NULL,
  PRIMARY KEY (`dept_id`),
  UNIQUE KEY `dept_code_UNIQUE` (`dept_code`)); 


CREATE TABLE `user_dept_access` (
  `user_dept_id` int NOT NULL AUTO_INCREMENT,
  `userid` int NOT NULL,
  `deptid` int NOT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int NOT NULL,
  `is_admin` BOOLEAN NOT NULL,
  `is_user` BOOLEAN NOT NULL,
  PRIMARY KEY (`user_dept_id`),
  FOREIGN KEY (`userid`) REFERENCES `user` (`user_id`),
  FOREIGN KEY (`deptid`) REFERENCES `dept` (`dept_id`),
  FOREIGN KEY (`created_by`) REFERENCES `user` (`user_id`));



CREATE TABLE `requests` (
  `request_id` int NOT NULL AUTO_INCREMENT,
  `request_dept` int NOT NULL,
  `request_number` varchar(255) NOT NULL,
  `request_title` varchar(255) NOT NULL,
  `request_description` varchar(255) NOT NULL,
  `assigned_to` int NOT NULL,
  `assigned_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `initial_comments` longblob,
  `initial_status` varchar(45) NOT NULL,
  `created_by` int NOT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `request_priority` int DEFAULT NULL,
  `request_severity` int DEFAULT NULL,
  PRIMARY KEY (`request_id`),
  FOREIGN KEY (`assigned_to`) REFERENCES `user` (`user_id`),
  FOREIGN KEY (`created_by`) REFERENCES `user` (`user_id`),
  FOREIGN KEY (`request_dept`) REFERENCES `dept` (`dept_id`));



CREATE TABLE `requests_comments` (
  `request_comment_id` int NOT NULL AUTO_INCREMENT,
  `request_id` int NOT NULL,
  `request_sequence_no` int NOT NULL,
  `request_comment` longblob,
  `created_by` int NOT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`request_comment_id`),
  FOREIGN KEY (`request_id`) REFERENCES `requests` (`request_id`),
  FOREIGN KEY (`created_by`) REFERENCES `user` (`user_id`)); 


CREATE TABLE `status_codes` (
  `status_id` int NOT NULL AUTO_INCREMENT,
  `status_code` varchar(255) NOT NULL,
  `status_desc` varchar(255) NOT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int NOT NULL,
  `request_id` int NOT NULL,
  PRIMARY KEY (`status_id`),
  FOREIGN KEY (`created_by`) REFERENCES `user` (`user_id`),
  FOREIGN KEY (`request_id`) REFERENCES `requests` (`request_id`));



CREATE TABLE `audit_log` (
  `audit_id` int NOT NULL AUTO_INCREMENT,
  `change_type` varchar(255) DEFAULT NULL,
  `change_type_id` int DEFAULT NULL,
  `audit_desc` varchar(255) NOT NULL,
  `created_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `created_by` int NOT NULL,
  `comments` longblob,
  `status` varchar(255) NOT NULL,
  PRIMARY KEY (`audit_id`),
  FOREIGN KEY (`change_type_id`) REFERENCES `requests` (`request_id`),
  FOREIGN KEY (`created_by`) REFERENCES `user` (`user_id`));





Triggers:

CREATE DEFINER=`root`@`localhost` TRIGGER `requests_BEFORE_UPDATE` BEFORE UPDATE ON `requests` FOR EACH ROW BEGIN
	DECLARE temp varchar(255);
    DECLARE flag int;
    SET flag = 1;
    IF old.request_title != new.request_title OR old.request_description != new.request_description THEN SET temp = 'Request';
    ELSEIF old.request_dept != new.request_dept THEN SET temp = 'Department';    
    ELSEIF old.assigned_to != new.assigned_to THEN SET temp = 'User';
    ELSEIF old.initial_status != new.initial_status THEN SET temp = 'Status';
    ELSEIF old.initial_comments != new.initial_comments THEN SET temp = 'Comment';
    ELSE SET temp = 'No Change'; SET flag = 0;
    END IF;
    IF flag = 1 THEN
    INSERT INTO rts.audit_log (change_type, change_type_id, audit_desc, comments, status, created_by)
    VALUES ( temp, old.request_id,  old.request_title, old.initial_comments, old.initial_status, old.created_by);
    END IF;

END
